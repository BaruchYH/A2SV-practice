class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        buses = defaultdict(list)
        
        for i, route in enumerate(routes):
            for stop in route:
                buses[stop].append(i)
        
        q = deque([(source, 0, -1)])
        
        seen = set([source])
        r_seen = set()

        while q:
            curr_stop, steps, curr_route = q.popleft()
            r_seen.add(curr_route)
            if curr_stop == target:
                return steps
            for availables in buses[curr_stop]:
                if availables not in r_seen:
                    for stops in routes[availables]:
                        if stops not in seen and availables != curr_route:
                            q.append((stops, steps + 1, availables))
                            seen.add(stops)
                    r_seen.add(availables)
        return -1

